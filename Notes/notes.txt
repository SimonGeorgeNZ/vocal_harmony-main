<div class="row keyDD">
    <div class="col-3 header">
        <div class="btn-group keyButton">
            <button class="btn btn-secondary btn-lg dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Pick your key
            </button>
            <ul class="dropdown-menu">
                <form>
                    {% for keys in ks %}

                    <li><button type="submit" value="{{url_for('harmony', key=ks.keySig)}}" name="keySig" class="dropdown-item text-center">{{ keys.keySig }}</button></li>

                    {% endfor %}
                </form>
            </ul>
        </div>
        

    </div>

    
</div> 

<div class="col-9 header">
    <div class="header">
        <p id="keyIs">Your key is </p>
        {{ sk.keySig }}

    </div>
    <div class="header">
        <p id="keyIs">The notes are </p>
        {{ notes|join(', ') }}
        
    </div>
</div>


# def pick_your_key():
#     sel_key = []
#     selected_key = request.form.get("keySig")
#     sel_key = mongo.db.keys.find_one({"keySig": selected_key})
#     return sel_key


# Finds all notes in selected key signature from DB using previous function#
# Used to display all the notes of the scale in "The notes are"#


# def get_scale_notes():
#     keyNotes = pick_your_key()
#     listNotes = keyNotes.get("notes")
#     return listNotes


# @app.route("/test", methods=["GET"])
# def try_once():
#     return render_template(
#         "test.html",
#         ks=get_data(),
#     )


# @app.route("/test/<key>", methods=["GET"])
# def try_get(key):
#     print(key)
#     return render_template(
#         "test.html",
#         ks=get_data(),
#         notes=get_scale_notes(),
#         key=key,
#     )


# @app.route("/play_note/<key>", methods=["GET", "POST"])
    # def play_note(key):
    #     picked_root = []
    #     if request.method == "POST":
    #         picked_root = request.form.get("rootSelect")
    #         print([picked_root])
    #         picked = mongo.db.keys.find_one({"keySig": key})
    #         Keynotes = picked["notes"]
    #         print("two")
    #         return render_template("index.html", Keynotes=Keynotes, key=key)


    # playedNotes = request.form.get("harmSelect")
    # for a in playedNotes:
    # print(a)
    # print(x)
    # print(compare)


    @app.route("/test/<key>", methods=["POST", "GET"])
        def try_get(key):
            picked = mongo.db.keys.find_one({"keySig": key})
            key = picked["keySig"]
            Keynotes = picked["notes"]
             playedNotes = request.form.get("harmSelect")
            if request.method == "POST":
                for x in Keynotes:
                    note = x
                    one = "./media/"
                    two = ".wav"
                    compare = one + note + two
            return render_template(
                "index.html",
                Keynotes=Keynotes,
                ks=get_data(),
                key=key,
            )

           
            
            # path=file_path(),
            path = file_path()

audio1 = AudioSegment.from_file("chunk1.wav") #your first audio file
audio2 = AudioSegment.from_file("chunk2.wav") #your second audio file
audio3 = AudioSegment.from_file("chunk3.wav") #your third audio file

mixed = audio1.overlay(audio2)          #combine , superimpose audio files
mixed1  = mixed.overlay(audio3)          #Further combine , superimpose audio files
#If you need to save mixed file
mixed1.export("mixed.wav", format='wav') #export mixed  audio file
play(mixed1)                             #play mixed audio file